name: Sync to Project Board

on:
  issues:
    types: [opened, labeled]

jobs:
  sync-to-project:
    runs-on: ubuntu-latest
    steps:
      - name: Add to project and set fields
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const projectId = 'PVT_kwDOBuJpD84BGSiq';
            const issue = context.payload.issue;
            const labels = issue.labels.map(l => l.name);

            console.log(`Processing issue #${issue.number}: ${issue.title}`);
            console.log(`Labels: ${labels.join(', ')}`);

            // Get project field IDs
            const projectFields = await github.graphql(`
              query($projectId: ID!) {
                node(id: $projectId) {
                  ... on ProjectV2 {
                    fields(first: 20) {
                      nodes {
                        ... on ProjectV2SingleSelectField {
                          id
                          name
                          options {
                            id
                            name
                          }
                        }
                      }
                    }
                  }
                }
              }
            `, { projectId });

            const fields = projectFields.node.fields.nodes;
            const priorityField = fields.find(f => f.name === 'Priority');
            const environmentField = fields.find(f => f.name === 'Environment');
            const serviceField = fields.find(f => f.name === 'Service');

            // Determine field values from labels
            let priority = 'Medium';
            let environment = 'Development';
            let service = 'Infrastructure';

            // Priority mapping
            if (labels.includes('incident')) priority = 'High';
            else if (labels.includes('priority:high')) priority = 'High';
            else if (labels.includes('priority:medium')) priority = 'Medium';
            else if (labels.includes('priority:low')) priority = 'Low';

            // Environment mapping
            if (labels.includes('production')) environment = 'Production';
            else if (labels.includes('development')) environment = 'Development';
            else if (labels.includes('local')) environment = 'Local';

            // Service mapping (Upptime creates issues with service names in title)
            if (labels.includes('admin') || issue.title.includes('Admin')) service = 'Admin';
            else if (labels.includes('app') || issue.title.includes('App')) service = 'App';
            else if (labels.includes('api') || issue.title.includes('API')) service = 'API';
            else if (labels.includes('rent') || issue.title.includes('Rent')) service = 'Rent';
            else if (labels.includes('explorer') || issue.title.includes('Explorer')) service = 'Explorer';
            else if (labels.includes('uptime')) service = 'Infrastructure';

            console.log(`Assigning: Priority=${priority}, Environment=${environment}, Service=${service}`);

            // Get option IDs
            const priorityOption = priorityField.options.find(o => o.name === priority);
            const environmentOption = environmentField.options.find(o => o.name === environment);
            const serviceOption = serviceField.options.find(o => o.name === service);

            // Add issue to project
            const addResult = await github.graphql(`
              mutation($projectId: ID!, $contentId: ID!) {
                addProjectV2ItemById(input: {
                  projectId: $projectId
                  contentId: $contentId
                }) {
                  item {
                    id
                  }
                }
              }
            `, {
              projectId: projectId,
              contentId: issue.node_id
            });

            const itemId = addResult.addProjectV2ItemById.item.id;
            console.log(`Added to project with item ID: ${itemId}`);

            // Set Priority field
            if (priorityOption) {
              await github.graphql(`
                mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $optionId: String!) {
                  updateProjectV2ItemFieldValue(input: {
                    projectId: $projectId
                    itemId: $itemId
                    fieldId: $fieldId
                    value: {singleSelectOptionId: $optionId}
                  }) {
                    projectV2Item {
                      id
                    }
                  }
                }
              `, {
                projectId: projectId,
                itemId: itemId,
                fieldId: priorityField.id,
                optionId: priorityOption.id
              });
              console.log(`âœ… Set Priority to ${priority}`);
            }

            // Set Environment field
            if (environmentOption) {
              await github.graphql(`
                mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $optionId: String!) {
                  updateProjectV2ItemFieldValue(input: {
                    projectId: $projectId
                    itemId: $itemId
                    fieldId: $fieldId
                    value: {singleSelectOptionId: $optionId}
                  }) {
                    projectV2Item {
                      id
                    }
                  }
                }
              `, {
                projectId: projectId,
                itemId: itemId,
                fieldId: environmentField.id,
                optionId: environmentOption.id
              });
              console.log(`âœ… Set Environment to ${environment}`);
            }

            // Set Service field
            if (serviceOption) {
              await github.graphql(`
                mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $optionId: String!) {
                  updateProjectV2ItemFieldValue(input: {
                    projectId: $projectId
                    itemId: $itemId
                    fieldId: $fieldId
                    value: {singleSelectOptionId: $optionId}
                  }) {
                    projectV2Item {
                      id
                    }
                  }
                }
              `, {
                projectId: projectId,
                itemId: itemId,
                fieldId: serviceField.id,
                optionId: serviceOption.id
              });
              console.log(`âœ… Set Service to ${service}`);
            }

            console.log('ðŸŽ‰ Project sync complete!');
